import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:5000/api';

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞
const testPhrase = {
  russian: "–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞",
  german: "Testphrase",
  transcription: "[—Ç–µ—Å—Ç—Ñ—Ä–∞–∑–µ]",
  category: "general",
  masteryLevel: 0,
  lastReviewedAt: null,
  nextReviewAt: Date.now() + 86400000, // –ß–µ—Ä–µ–∑ 24 —á–∞—Å–∞
  knowCount: 0,
  knowStreak: 0,
  isMastered: false
};

async function runTests() {
  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ—Ä–∞–∑...\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∞–∑—ã (CREATE)
    console.log('1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—Ä–∞–∑—ã...');
    const createResponse = await fetch(`${BASE_URL}/phrases`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testPhrase)
    });
    
    const createdPhrase = await createResponse.json();
    console.log('–°–æ–∑–¥–∞–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞:', createdPhrase);
    
    if (createResponse.status !== 201) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ—Ä–∞–∑—ã:', createdPhrase);
      return;
    }
    
    const phraseId = createdPhrase.id;
    console.log('‚úÖ –§—Ä–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', phraseId);
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—Ä–∞–∑ (READ ALL)
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ—Ä–∞–∑...');
    const getAllResponse = await fetch(`${BASE_URL}/phrases`);
    const allPhrases = await getAllResponse.json();
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${allPhrases.length} —Ñ—Ä–∞–∑`);
    console.log('‚úÖ –í—Å–µ —Ñ—Ä–∞–∑—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã (READ ONE)
    console.log('\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã...');
    const getOneResponse = await fetch(`${BASE_URL}/phrases/${phraseId}`);
    const fetchedPhrase = await getOneResponse.json();
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞:', fetchedPhrase);
    console.log('‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã (UPDATE)
    console.log('\n4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã...');
    const updatedPhrase = {
      ...testPhrase,
      knowCount: 1,
      knowStreak: 1,
      masteryLevel: 1
    };
    
    const updateResponse = await fetch(`${BASE_URL}/phrases/${phraseId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedPhrase)
    });
    
    const updateResult = await updateResponse.json();
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—Ä–∞–∑–∞:', updateResult);
    console.log('‚úÖ –§—Ä–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    
    // 5. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã (DELETE)
    console.log('\n5. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã...');
    const deleteResponse = await fetch(`${BASE_URL}/phrases/${phraseId}`, {
      method: 'DELETE'
    });
    
    if (deleteResponse.status === 204) {
      console.log('‚úÖ –§—Ä–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã');
    }
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();